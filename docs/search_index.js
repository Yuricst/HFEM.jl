var documenterSearchIndex = {"docs":
[{"location":"api.html#Core-routines","page":"API","title":"Core routines","text":"","category":"section"},{"location":"api.html#Parameters-and-Interpolations","page":"API","title":"Parameters & Interpolations","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [HFEM]\nOrder   = [:function, :type, :struct]\nPages   = [\n  \"parameters.jl\",\n  \"ephemeris_interpolation.jl\",\n  \"transformation_interpolation.jl\",\n]","category":"page"},{"location":"api.html#Main.HFEM.HFEMParameters","page":"API","title":"Main.HFEM.HFEMParameters","text":"Construct HFEMParameters struct.\n\nArguments\n\net0::Float64: reference epoch in seconds past J2000\nDU::Real: canonical distance unit\nGMs::Vector{Float64}: gravitational constants of the bodies, in km^3/s^2\nnaif_ids::Vector{String}: NAIF IDs of the bodies\nnaif_frame::String: inertial frame in which dynamics is integrated\nabcorr::String: aberration correction for querying ephemerides of third bodies\nfilepath_spherical_harmonics::Union{Nothing,String}: path to spherical harmonics data file\nnmax::Int: maximum degree of spherical harmonics to be included\nframe_PCPF::Union{Nothing,String}: NAIF frame of planet-centered planet-fixed frame\nget_jacobian_func::Bool: whether to construct symbolic Jacobian function (only for Nbody dynamics)\ninterpolate_ephem_span::Union{Nothing,Vector{Float64}}: span of epochs to interpolate ephemerides\ninterpolation_time_step::Real: time step for interpolation\n\n\n\n\n\n","category":"type"},{"location":"api.html#Base.show-Tuple{IO, Main.HFEM.InterpolatedEphemeris}","page":"API","title":"Base.show","text":"Overload method for showing InterpolatedEphemeris\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.get_pos-Tuple{Main.HFEM.InterpolatedEphemeris, Float64}","page":"API","title":"Main.HFEM.get_pos","text":"Interpolate ephemeris position at a given epoch\n\nArguments\n\nephem::InterpolatedEphemeris: interpolated ephemeris struct\net::Float64: epoch to interpolate\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.get_state-Tuple{Main.HFEM.InterpolatedEphemeris, Float64}","page":"API","title":"Main.HFEM.get_state","text":"Interpolate ephemeris state at a given epoch\n\nArguments\n\nephem::InterpolatedEphemeris: interpolated ephemeris struct\net::Float64: epoch to interpolate\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.InterpolatedEphemeris","page":"API","title":"Main.HFEM.InterpolatedEphemeris","text":"InterpolatedEphemeris struct\n\nFields\n\nnaif_id::String: NAIF ID of the body\net_range::Tuple{Float64, Float64}: span of epochs to interpolate\nsplines::Array{Spline1D, 1}: splines for the interpolated ephemeris\nrescale_epoch::Bool: whether to rescale the epoch to the canonical time unit\ntstar::Float64: canonical time unit\n\nArguments\n\nnaif_id::String: NAIF ID of the body\nets::Vector{Float64}: epochs to interpolate\nrvs::Array{Float64, 2}: position and velocity vectors of the body, in km and km/s\nrescale_epoch::Bool: whether to rescale the epoch to the canonical time unit\ntstar::Float64: canonical time unit\nspline_order::Int: order of the spline\n\n\n\n\n\n","category":"type"},{"location":"api.html#Base.show-Tuple{IO, Main.HFEM.InterpolatedTransformation}","page":"API","title":"Base.show","text":"Overload method for showing InterpolatedTransformation\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.get_euler_angles-Tuple{Main.HFEM.InterpolatedTransformation, Float64}","page":"API","title":"Main.HFEM.get_euler_angles","text":"Interpolate Euler angles at a given epoch\n\nArguments\n\ntransformation::InterpolatedTransformation: interpolated transformation struct\net::Float64: epoch to interpolate\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.pxform-Tuple{Main.HFEM.InterpolatedTransformation, Float64}","page":"API","title":"Main.HFEM.pxform","text":"Interpolate transformation matrix at a given epoch\n\nArguments\n\ntransformation::InterpolatedTransformation: interpolated transformation struct\net::Float64: epoch to interpolate\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.InterpolatedTransformation","page":"API","title":"Main.HFEM.InterpolatedTransformation","text":"InterpolatedTransformation struct\n\nFields\n\net_range::Tuple{Float64, Float64}: span of epochs to interpolate\nframe_from::String: frame from which the transformation is computed\nframe_to::String: frame to which the transformation is computed\naxis_sequence::Tuple{Int, Int, Int}: sequence of axes for the Euler angles\nsplines::Array{Spline1D, 1}: splines for the interpolated transformation\nrescale_epoch::Bool: whether to rescale the epoch to the canonical time unit\nTU::Float64: canonical time unit\n\nArguments\n\nets::Vector{Float64}: epochs to interpolate\nframe_from::String: frame from which the transformation is computed\nframe_to::String: frame to which the transformation is computed\nrescale_epoch::Bool: whether to rescale the epoch to the canonical time unit\nTU::Float64: canonical time unit\nspline_order::Int: order of the spline\n\n\n\n\n\n","category":"type"},{"location":"api.html#Equations-of-motion","page":"API","title":"Equations of motion","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [HFEM]\nOrder   = [:function, :type]\nPages   = [\n  \"eoms/eom_Nbody_Interp.jl\",\n  \"eoms/eom_Nbody_SPICE.jl\",\n  \"eoms/eom_NbodySH_Interp.jl\",\n  \"eoms/eom_NbodySH_SPICE.jl\"\n]","category":"page"},{"location":"api.html#Main.HFEM.dfdx_Nbody_Interp-NTuple{4, Any}","page":"API","title":"Main.HFEM.dfdx_Nbody_Interp","text":"dfdx_Nbody_Interp(x, u, params, t)\n\nEvaluate Jacobian of N-body problem\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.dfdx_Nbody_Interp_fd-NTuple{4, Any}","page":"API","title":"Main.HFEM.dfdx_Nbody_Interp_fd","text":"dfdx_Nbody_Interp_fd(x, u, params, t)\n\nEvaluate Jacobian of N-body problem\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_Nbody_Interp!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_Nbody_Interp!","text":"eom_Nbody_Interp!(dx, x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_Nbody_Interp-Tuple{Any, Any, Any}","page":"API","title":"Main.HFEM.eom_Nbody_Interp","text":"eom_Nbody_Interp(x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_stm_Nbody_Interp!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_stm_Nbody_Interp!","text":"eom_stm_Nbody_Interp!(dx_stm, x_stm, params, t)\n\nRight-hand side of N-body equations of motion with STM compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_stm_Nbody_Interp_fd!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_stm_Nbody_Interp_fd!","text":"eom_stm_Nbody_Interp_fd!(dx_stm, x_stm, params, t)\n\nRight-hand side of N-body equations of motion with STM compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.dfdx_Nbody_SPICE-NTuple{4, Any}","page":"API","title":"Main.HFEM.dfdx_Nbody_SPICE","text":"dfdx_Nbody_SPICE(x, u, params, t)\n\nEvaluate Jacobian of N-body problem\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_Nbody_SPICE!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_Nbody_SPICE!","text":"eom_Nbody_SPICE!(dx, x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_stm_Nbody_SPICE!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_stm_Nbody_SPICE!","text":"eom_stm_Nbody_SPICE!(dx_stm, x_stm, params, t)\n\nRight-hand side of N-body equations of motion with STMcompatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.dfdx_NbodySH_Interp_fd-NTuple{4, Any}","page":"API","title":"Main.HFEM.dfdx_NbodySH_Interp_fd","text":"dfdx_NbodySH_Interp_fd(x, u, params, t)\n\nEvaluate Jacobian of N-body problem\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_NbodySH_Interp!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_NbodySH_Interp!","text":"eom_NbodySH_Interp!(dx, x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_NbodySH_Interp-Tuple{Any, Any, Any}","page":"API","title":"Main.HFEM.eom_NbodySH_Interp","text":"eom_NbodySH_Interp(x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_stm_NbodySH_Interp_fd!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_stm_NbodySH_Interp_fd!","text":"eom_stm_NbodySH_Interp_fd!(dx_stm, x_stm, params, t)\n\nRight-hand side of N-body equations of motion with STM compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.dfdx_NbodySH_SPICE_fd-NTuple{4, Any}","page":"API","title":"Main.HFEM.dfdx_NbodySH_SPICE_fd","text":"dfdx_NbodySH_SPICE_fd(x, u, params, t)\n\nEvaluate Jacobian of N-body problem\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_NbodySH_SPICE!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_NbodySH_SPICE!","text":"eom_NbodySH_SPICE!(dx, x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_NbodySH_SPICE-Tuple{Any, Any, Any}","page":"API","title":"Main.HFEM.eom_NbodySH_SPICE","text":"eom_NbodySH_SPICE(x, params, t)\n\nRight-hand side of N-body equations of motion compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.eom_stm_NbodySH_SPICE_fd!-NTuple{4, Any}","page":"API","title":"Main.HFEM.eom_stm_NbodySH_SPICE_fd!","text":"eom_stm_NbodySH_SPICE_fd!(dx_stm, x_stm, params, t)\n\nRight-hand side of N-body equations of motion with STM compatible with DifferentialEquations.jl\n\n\n\n\n\n","category":"method"},{"location":"api.html#Perturbations","page":"API","title":"Perturbations","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [HFEM]\nOrder   = [:function, :type]\nPages   = [\n  \"perturbations/spherical_harmonics.jl\",\n  \"perturbations/third_body.jl\"\n]","category":"page"},{"location":"api.html#Main.HFEM.get_VWnm-Tuple{Real, Real, Real, Real, Int64, Int64}","page":"API","title":"Main.HFEM.get_VWnm","text":"Get multipliers into gravity potential c.f. Montenbruck & Gill pg.66 eqn (3.27)\n\nArguments\n\nphi::Real: latitude\nlambda::Real: longitude\nR::Real: radius of Earth\nr::Real: radius of spacecraft\nn::Int: degree\nm::Int: order\n\nReturns\n\nVnm::Real: Vnm component\nWnm::Real: Wnm component\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.legendre-Tuple{Int64, Int64, Real}","page":"API","title":"Main.HFEM.legendre","text":"Compute Legendre function of degree n order m\n\nArguments\n\nn::Int: degree (must be >= m)\nm::Int: order \nt::Real: argument (cosine of latitude)\n\nReturns\n\nPnm::Real: Legendre function value\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.spherical_harmonics_accel_PCPF-Tuple{Vector, Dict, Dict, Real, Real, Int64}","page":"API","title":"Main.HFEM.spherical_harmonics_accel_PCPF","text":"Get acceleration due to potential up to degree nmax in planet-centered planet-fixed frame\n\nArguments\n\nphi::Real: latitude\nlambda::Real: longitude\nCS::Matrix: coefficient matrix\nGM::Real: gravitational parameter\nR::Real: reference radius\nr::Real: radius of spacecraft\nnmax::Int: maximum degree\n\nReturns\n\naccel_PCPF::Vector{Real}: acceleration in planet-centered planet-fixed frame\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.spherical_harmonics_nm_accel_PCPF-Tuple{Real, Real, Real, Dict, Dict, Real, Real, Int64, Int64}","page":"API","title":"Main.HFEM.spherical_harmonics_nm_accel_PCPF","text":"Get acceleration due to (n,m) potential in planet-centered planet-fixed frame c.f. Montenbruck & Gill pg.68 eqn (3.33)\n\nArguments\n\nphi::Real: latitude\nlambda::Real: longitude\nCnm_dict::Dict: dictionary of Cnm coefficients (de-normalized)\nSnm_dict::Dict: dictionary of Snm coefficients (de-normalized)\nGM::Real: gravitational parameter\nR::Real: reference radius\nr::Real: radius of spacecraft\nn::Int: degree\nm::Int: order\n\nReturns\n\naccel_PCPF::Vector{Real}: acceleration in planet-centered planet-fixed frame\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.third_body_accel-Tuple{Any, Any, Any}","page":"API","title":"Main.HFEM.third_body_accel","text":"Compute third-body acceleration via Battin's formula\n\n\n\n\n\n","category":"method"},{"location":"api.html#Events","page":"API","title":"Events","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [HFEM]\nOrder   = [:function, :type]\nPages   = [\n  \"events.jl\",\n]","category":"page"},{"location":"api.html#Main.HFEM.angle_difference-Tuple{Real, Real}","page":"API","title":"Main.HFEM.angle_difference","text":"angle_difference(ϕ_fwd::Real, ϕ_bck::Real)\n\nCompute angle difference for periodic angles between 0 and 2π\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.cart2trueanomaly-Tuple{Vector, Float64}","page":"API","title":"Main.HFEM.cart2trueanomaly","text":"Compute osculating true anomaly from state and mu\n\nArguments\n\nstate::Vector: state vector in Cartesian coordinates, in order [x, y, z, vx, vy, vz]\nmu::Float64: gravitational parameter\nto2pi::Bool: if true, return the true anomaly in the range [0, 2π]\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.get_trueanomaly_event-Tuple{Real}","page":"API","title":"Main.HFEM.get_trueanomaly_event","text":"Get event function to detect target osculating true anomaly\n\nArguments\n\nθ_target::Real: target osculating true anomaly\nt_bounds::Tuple{Real,Real}: time bounds\nradius_bounds::Tuple{Real,Real}: radius bounds\nθ_check_range::Float64: check range for true anomaly\n\nReturns:\n\n_condition: event function with signature (x, t, integrator) -> Union{Float64, NaN}\n\n\n\n\n\n","category":"method"},{"location":"api.html#Main.HFEM.mod_custom-Tuple{Any, Any}","page":"API","title":"Main.HFEM.mod_custom","text":"mod_custom(a, n)\n\nCustom modulo function Ref: https://stackoverflow.com/questions/1878907/how-can-i-find-the-difference-between-two-angles\n\n\n\n\n\n","category":"method"},{"location":"overview.html#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"overview.html","page":"Overview","title":"Overview","text":"There are a number of equations of motion implemented in HFEM.jl.","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"functions starting with eom_ integrates the translational state ([x,y,z,vx,vy,vz])\nfunctions starting with eom_stm_ integrates both the translational state and the flattened 6-by-6 STM.","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"note: Note\nThe STM is flattened row-wise, so to extract the state & STM from the ODESolution, make sure to reshape then tranapose; for example,x_stm_tf = sol.u[end]                       # concatenated state & STM (flattened)\nx_tf     = x_stm_tf[1:6]                    # final state [x,y,z,vx,vy,vz]\nSTM_tf   = reshape(sol.u[end][7:42],6,6)'   # final 6-by-6 STM","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"The dynamics model is of the form ","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"dotboldsymbolx = \nbeginbmatrix\n    dotboldsymbolr  dotboldsymbolv\nendbmatrix = \nbeginbmatrix\n    boldsymbolv\n     -dfracmu boldsymbolr _2^3boldsymbolr\nendbmatrix\n+\nsum_i \nbeginbmatrix\n    boldsymbol0_3 times 1\n     boldsymbola_mathrm3bdi \nendbmatrix\n+ \nbeginbmatrix\n    boldsymbol0_3 times 1\n     boldsymbola_mathrmSHn_max\nendbmatrix","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"where: ","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"Nbody: central gravity term + third-body perturbations (boldsymbola_mathrm3bdi)\nNbodySH: central gravity term + third-body perturbations + spherical harmonics perturbations up to nmax degree (boldsymbola_mathrmSHn_max)","category":"page"},{"location":"overview.html#List-of-equations-of-motion-in-HFEM.jl","page":"Overview","title":"List of equations of motion in HFEM.jl","text":"","category":"section"},{"location":"overview.html","page":"Overview","title":"Overview","text":"The STM is integrated with the Jacobian, which is computed either analytically (using symbolic derivative) or via ForwardDiff (functions containing _fd)","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"eom eom + STM (analytical) eom + STM (ForwardDiff) EnsembleThreads compatibility\neom_Nbody_SPICE! eom_stm_Nbody_SPICE!  no\neom_Nbody_Interp! eom_stm_Nbody_Interp! eom_stm_Nbody_Interp_fd! yes\neom_NbodySH_SPICE!  eom_stm_NbodySH_SPICE_fd! no\neom_NbodySH_Interp!  eom_stm_NbodySH_Interp_fd! yes","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"note: Note\nIn order to use Julia's dual numbers, make sure to use a function that does not contain SPICE calls (i.e. use ones with _interp in the name); this is enabled by interpolating ahead of time ephemerides/transformation matrices.","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"warning: Warning\nThe accuracy of interpolated equations of motion (with _interp in the name) depends on the interpolation_time_step; if high-accuracy integration is required, it is advised to directly use the equations of motion that internally call SPICE (i.e. with _SPICE in the name)","category":"page"},{"location":"overview.html#Initializing-the-parameter","page":"Overview","title":"Initializing the parameter","text":"","category":"section"},{"location":"overview.html","page":"Overview","title":"Overview","text":"We first need to define the parameter struct to be parsed as argument to the equations of motion.","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"Below is the most general example compatible with eom_NbodySH_Interp!/eom_stm_NbodySH_Interp_fd!:","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"using OrdinaryDiffEq\nusing HFEM\n\nnaif_ids = [\"301\", \"399\", \"10\"]        # NAIF IDs of bodies to be included; first ID is of the central body\nGMs = [4.9028000661637961E+03, 3.9860043543609598E+05, 1.3271244004193938E+11]   # in km^3/s^2\nnaif_frame = \"J2000\"\nabcorr = \"NONE\"\nDU = 1e5                               # canonical distance unit, in km\n\nnmax = 4                               # using up to 4-by-4 spherical harmonics\nfilepath_spherical_harmonics = \"HFEM.jl/data/luna/gggrx_1200l_sha_20x20.tab\"\n\net0 = str2et(\"2026-01-05T00:00:00\")    # reference epoch\netf = et0 + 30 * 86400.0\ninterpolate_ephem_span = [et0, etf]    # range of epoch to interpolate ephemeris\ninterpolation_time_step = 1000.0       # time-step to sample ephemeris for interpolation\n\nparameters = HFEM.HFEMParameters(\n    et0, DU, GMs, naif_ids, naif_frame, abcorr;\n    interpolate_ephem_span=interpolate_ephem_span,\n    interpolation_time_step = interpolation_time_step,\n    filepath_spherical_harmonics = filepath_spherical_harmonics,\n    nmax = nmax,\n    frame_PCPF = \"MOON_PA\",\n)","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"Note:","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"if using _SPICE equations of motion, you do not need to parse interpolate_ephem_span and interpolation_time_step\nif using Nbody dynamics instead of NbodySH, you do not need to parse filepath_spherical_harmonics, nmax, and frame_PCPF","category":"page"},{"location":"overview.html#Solving-the-Initial-Value-Problem","page":"Overview","title":"Solving the Initial Value Problem","text":"","category":"section"},{"location":"overview.html","page":"Overview","title":"Overview","text":"The integration is done with the OrdinaryDiffEq.jl library (or equivalently with DifferentialEquations.jl).","category":"page"},{"location":"overview.html","page":"Overview","title":"Overview","text":"# initial state (in canonical scale)\nx0 = [1.05, 0.0, 0.3, 0.5, 1.0, 0.0]\n\n# time span (in canonical scale)\ntspan = (0.0, 6 * 3600/parameters.TU)\n\n# solve with SPICE\nprob_spice = ODEProblem(HFEM.eom_NbodySH_SPICE!, x0, tspan, parameters)\nsol_spice = solve(prob_spice, Vern8(), reltol=1e-14, abstol=1e-14)\n\n# solve with interpolation\nprob_interp = ODEProblem(HFEM.eom_NbodySH_Interp!, x0, tspan, parameters)\nsol_interp = solve(prob_interp, Vern8(), reltol=1e-14, abstol=1e-14)","category":"page"},{"location":"index.html#HFEM.jl:-High-Fidelity-Ephemeris-Model-for-Astrodynamics","page":"Home","title":"HFEM.jl: High-Fidelity Ephemeris Model for Astrodynamics","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: test workflow)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"HFEM.jl is a minimal implementation of high-fidelity ephemeris model dynamics compatible with the OrdinaryDiffEq.jl ecosystem (i.e. its solvers, parallelism, etc.).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"What HFEM.jl contains:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"full-ephemeris equations of motion relevant for astrodynamics\ncallback conditions for common astrodynamics events (e.g. detection of osculating true anomaly)\nephemeris interpolation, to define equations of motion compatible with EnsembleThreads & automatic differentiation","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"What HFEM.jl is not:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"not an integrator, i.e. there are no integration schemes (e.g. Runge-Kutta algorithms, step-correction, event detection features, etc.) impemented (at least for now)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We strive for minimal dependencies (listed in Project.toml), consisting of: Dierckx, ForwardDiff, LinearAlgebra, OrdinaryDiffEq, SPICE, Symbolics.","category":"page"},{"location":"index.html#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"git clone this repositiory\nIn your project directory, add:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pkg> dev ./path/to/HFEM.jl","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To run tests, cd to the root of this repository, then","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(@v1.10) pkg> activate .\n(HFEM) pkg> test","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html#N-body-Dynamics","page":"Home","title":"N-body Dynamics","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using HFEM\nusing OrdinaryDiffEq\n\n# define parameters\nGMs = [\n    4.9028000661637961E+03,\n    3.9860043543609598E+05,\n    1.3271244004193938E+11,                 # GM's in km^3/s^2\n]\nnaif_ids = [\"301\", \"399\", \"10\"]\nnaif_frame = \"J2000\"\nabcorr = \"NONE\"\nDU = 3000.0                                 # distance canonical scale, in km\net0 = str2et(\"2020-01-01T00:00:00\")         # reference epoch (i.e. epoch when t = 0 within the eom)\nparameters = HFEM.HFEMParameters(et0, DU, GMs, naif_ids, naif_frame, abcorr)\n\n# construct & solve ODE problem\nx0 = [1.0, 0.0, 0.3, 0.5, 1.0, 0.0]         # initial state in DU & DU/TU\ntspan = (0.0, 7*86400/parameters.TU)\nprob = ODEProblem(HFEM.eom_Nbody_SPICE!, x0, tspan, parameters)\nsol = solve(prob, Vern7(), reltol=1e-12, abstol=1e-12)\n\n# propagate both state & STM\nx0_stm = [x0; reshape(I(6),36)]\nprob = ODEProblem(HFEM.eom_stm_Nbody_SPICE!, x0_stm, tspan, parameters)\nsol = solve(prob, Vern7(), reltol=1e-12, abstol=1e-12)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To parallelize with multi-thread, use instead interpolated ephemerides:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"et0 = str2et(\"2020-01-01T00:00:00\")\netf = et0 + 30 * 86400.0\ninterpolate_ephem_span = [et0, etf]\nparameters = HFEM.HFEMParameters(\n    et0, DU, GMs, naif_ids, naif_frame, abcorr;\n    interpolate_ephem_span = interpolate_ephem_span\n)\n\n# construct & solve ODE problem\nx0 = [1.0, 0.0, 0.3, 0.5, 1.0, 0.0]         # initial state in DU & DU/TU\ntspan = (0.0, 7*86400/parameters.TU)\nprob = ODEProblem(HFEM.eom_Nbody_Interp!, x0, tspan, parameters)\nsol = solve(prob, Vern7(), reltol=1e-12, abstol=1e-12)\n\n# propagate both state & STM\nx0_stm = [x0; reshape(I(6),36)]\nprob = ODEProblem(HFEM.eom_stm_Nbody_Interp!, x0_stm, tspan, parameters)\nsol = solve(prob, Vern7(), reltol=1e-12, abstol=1e-12)","category":"page"}]
}
